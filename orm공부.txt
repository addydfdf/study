✅ORM(Object Relational Mapping)
객체-관계 매핑

객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것

객체지향 프로그래밍은 클래스를 사용하고, 관계형 데이터베이스는 테이블을 사용함
객체 모델과 관계형 모델 간에 불일치가 존재
orm을 통해해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결
데이터베이스 데이터<--매핑--> Objcet 필드

객체를 통해 간접적으로 데이터베이스 데이터를 다룸.
ORM의 장단점
🟡장점

객체 지향적인 코드로 인해 더 직관적이고 비즈니스 로직에 더 집중할 수 있도록 도와줌.
직관적인 코드로 데이터를 조작할 수 있어 개발자가 객체 모델로 프로그램밍하는데 집중 가능
각종 객체에 대한 코드를 별도로 작성하기 때문에 코드의 가독성을 올려줌.
객체 재향적인 접근으로 인해 생산성이 증가
재사용 및 유지보수의 편리성이 증가
ORM은 독립적으로 작성되어있고, 해당 객체들을 재활용 할 수 있음. 때문에 모델에서 가공된데이터를 컨트롤러에 의해 뷰와 합쳐지는 형태로 디자인 패턴을 견고하게 다지는데 유리함.
<DBMS에 대한 종속성이 줄어듬>
-객체 간의 관계를 바탕으로 SQL을 자동으로 생성하기 때문에 RDBMS의 데이터 구조와 Java의 객체지향 모델 사이의 간격을 좁힐 수 있음.
-대부분 ORM 솔루션은 DB에 종속적이지 않음. 종속적이지 않다는것은 구현 방법 뿐만아니라 많은 솔루션에서 자료형 타입까지 유효.

프로그래머는 Object에 집중함으로 극단적으로 DBMS를 교체하는 거대한 작업에도 비교적 적은 리스크와 시간이 소요.
또한 자바에서 가공할경우 equals, hashCode의 오버라이드 같은 자바의 기능을 이용할 수 있고, 간결하고 빠른 가공이 가능.
🟡단점

완벽한 ORM 으로만 서비스를 구현하기가 어려움.
사용하기는 편하지만 설계는 매우 신중하게 해야함.
프로젝트의 복잡성이 커질경우 난이도 또한 올라갈 수 있음.
잘못 구현된 경우에 속도 저하 또는 일관성이 무너지는 문제점이 생길 수 있음.
✅ 관계형 데이터 베이스(Realtional Database Managment)
서로 관련된 데이터 지점에 대한 접근을 저장 밎 제공하는 데이터베이스 유형
데이터를 테이블에 직관적으로 간단하게 나타내는 관계형 모델을 기반으로 함
관계형 데이터베이스에서 테이블의 각 행은 키라는 고유 ID가 포함된 레코드입니다. 테이블의 열에는 데이터의 속성이 들어 있으며, 각 레코드에는 일반적으로 각 속성에 대한 값이 있으므로 데이터 포인트 간의 관계를 손쉽게 설정할 수 있음.
✅관계형 데이터베이스 시스템(Realtional Database Managment System)
관계형 데이터베이스를 관리하는 시스템
대표적으로 오라클, MS-SQL, MySQL, MariaDB, PostgreSQL, DB2, 등
이 중에서 오라클, MS-SQL, MySQL을 가장 많이 씀.
✅SQL(Structured Query Language)
관계형 데이터베이스를 사용할 때, 데이터베이스에 접근할 수 있는 데이터베이스 하부 언어,
구조화 정의어라 하고 데이터 베이스 질의 언어의 일종인데 특정한 데이터베이스에 한정되지 않아 널리 사용 가능.

DQL(Data Query Language) : RDBMS에 저장한 데이터를 원하는 방식으로 조회하는 명령어

DML(Data Manipulation Language) : RDBMS 내 테이블의 데이터를 저장, 수정, 삭제하는 데이터 조작어

DDL(Data Definition Language) : 테이블을 포함해서 RDBMS 내 데이터 관리를 위해 테이블을 포함한 여러 객체를 생성/수정/삭제하는 명령어 데이터 정의어이다.

TCL(Transaction Control Language) : 트랜잭션 데이터의 영구 저장, 취소 등과 관련된 명령어

✅MVC(Model View Controller)
소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴

☑️ model
데이터, 정보들의 가공을 책임지는 컴포넌트. 어플리케이션이 무엇을 할 것인지 정의. 내부 비즈니스 로직을 처리하기 위한 역할
📕 데이터 저장소와 연동하여 사용자가 입력한 데이터나 사용자에게 출력할 데이터를 다룸.
여러개의 데이터 변경작업을 하나의 작업으로 묶은 트랜잭션을 다루는 일도 함.

모델(Model)은 어플리케이션의 정보, 데이터를 나타냄. 데이터베이스, 처음의 정의하는 상수, 초기화 값, 변수 등을 뜻함. 비즈니스 로직을 처리한 후 모델의 변경사항을 컨트롤러와 뷰에 전달함.

사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 함.

뷰나 컨트롤러에 대해서 어떤 정보도 알지 말아야 함.

변경이 일어나면, 변경 통지에 대한 처리 방법을 구현해야만 함.

☑️뷰(View)
사용자에게 보여지는 부분, 즉 유저 인터페이스(User interface)를 의미.
📕 모델이 처리한 데이터나 그 작업 결과를 가지고 사용자에게 출력할 화면을 만듦.

뷰는 받은 데이터를 화면에 표시해주는 역할. 모델에게 전달받은 데이터를 별도로 저장하지 않아야 함. 사용자가 화면에 표시된 내용을 변경하게 되면 모델에게 전달하여 모델을 변경해야 함.

모델이 가지고 있는 정보를 따로 저장해서는 안됨.
모델이나 컨트롤러와 같이 다른 구성요소들을 몰라야 됨.
변경이 일어나면 변경통지에 대한 처리방법을 구현해야만 함.
☑️컨트롤러(Controller)
모델(Model)과 뷰(View) 사이를 이어주는 브릿지(Bridge) 역할
Model이 데이터를 어떻게 처리할지 알려주는 역할을 한다.

모델이나 뷰는 서로의 존재를 모르고 있다. 변경 사항을 외부로 알리고 수신하는 방법만 있음. 컨트롤러(Controller)는 이를 중재하기 위해 모델과 뷰에 대해 알고 있어야 함. 모델이나 뷰로부터 변경 내용을 통지 받으면 이를 각 구성 요소에게 통지. 사용자가 어플리케이션을 조작하여 발생하는 변경 이벤트들을 처리하는 역할을 수행.

모델이나 뷰에 대해서 알고 있어야 함.
모델이나 뷰의 변경을 모니터링 해야 함.
profile
suye 22